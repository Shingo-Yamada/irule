when HTTP_REQUEST {
	# Check for post requests to the fake URI
	if {[HTTP::uri] starts_with "/header.php" && [HTTP::method] eq "POST"}{

		# Collect up to 1Mb of request content
		if { [HTTP::header exists "Content-Length"] && [HTTP::header "Content-Length"] < 1048577 } {
			set content_length [HTTP::header "Content-Length"]
		} else {
			set content_length 1048576
		}
		if { $content_length > 0 } {
			 HTTP::collect $content_length
		}
	}
}

when HTTP_REQUEST_DATA {
	# Parse the username and password from the collected payload
	# log local0. "Query string of URI [HTTP::uri] is [URI::query [HTTP::uri]]"
	set username [URI::query "?[HTTP::payload]" username]
	set password [URI::query "?[HTTP::payload]" password]
	set password_ad [URI::query "?[HTTP::payload]" password_ad]
	log local0.info "USERNAME:$username PASSWORD:$password AD-PASSWORD:$password_ad"
	HTTP::release
}

when ACCESS_SESSION_STARTED {
    log local0.info "ACCESS_SESSION_STARTED"
	if { [ info exists username ] } {
		#ACCESS::session data set session.logon.last.username $username
		#ACCESS::session data set session.logon.last.logonname $username
		#ACCESS::session data set session.custom.rawpassword $password
		#ACCESS::session data set session.logon.last.password $password
		ACCESS::session data set session.logon.last.username [URI::decode $username]
		ACCESS::session data set session.logon.last.logonname [URI::decode $username]
		ACCESS::session data set session.custom.rawpassword [URI::decode $password]
	}
}

when ACCESS_ACL_ALLOWED {
    set F5_APM_USERNAME [ACCESS::session data get "session.logon.last.username"]
    set F5_APM_PASSWORD [ACCESS::session data get "session.custom.rawpassword"]
    if { !([HTTP::header exists "USERNAME"]) } { 
        HTTP::header insert "F5_APM_USERNAME" $F5_APM_USERNAME
        HTTP::header insert "F5_APM_PASSWORD" $F5_APM_PASSWORD
    }
}
